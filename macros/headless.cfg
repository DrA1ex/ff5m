##
## Alternative display implementation macros
##
## Copyright (C) 2025, Alexander K <https://github.com/drA1ex>
## Copyright (C) 2025, Sergei Rozhkov <https://github.com/ghzserg>
##
## This file may be distributed under the terms of the GNU GPLv3 license

[include base.cfg]
[include client.cfg]

[resurrection]
filename: /opt/config/mod_data/resurrection.json

[gcode_macro RESURRECT]
description: Restore the print
rename_existing: RESURRECT_BASE
gcode:
    RESURRECT_BASE

[gcode_macro RESURRECT_ABORT]
description: Abort the resurrection and cleanup
rename_existing: RESURRECT_ABORT_BASE
gcode:
    RESURRECT_ABORT_BASE

[filament_switch_sensor e0_sensor]
pause_on_runout: False
runout_gcode:
    {% set use_sensor = printer.mod_params.variables.filament_switch_sensor %}
    {% set filament_detected = printer['filament_switch_sensor e0_sensor'].filament_detected %}
    {% set printing =  printer.idle_timeout.state == "Printing" %}
    {% set paused = printer.pause_resume.is_paused %}
    {% set print_active = printer["gcode_macro _START_PRINT"].print_active %}

    {% if use_sensor and printing and print_active and not filament_detected and not paused %}
        PAUSE
        
        RESPOND PREFIX="!!" MSG="Filament runout detected!"
        M400

        _PRINT_STATUS S="FILAMENT RUNOUT"
    {% endif %}

[gcode_button btn_power]
pin: !PC15
press_gcode:
    _SHUTDOWN_BUTTON_TRIGGER

[gcode_macro _SHUTDOWN_BUTTON_TRIGGER]
variable_trigger_allowed: False
gcode:
    {% if trigger_allowed %}
        RESPOND TYPE=error MSG="Shutdown triggered by button"
        SHUTDOWN

        SET_GCODE_VARIABLE MACRO=_SHUTDOWN_BUTTON_TRIGGER VARIABLE=trigger_allowed VALUE=False
    {% endif %}

# Guard is needed as the button might trigger 0-2 times on RESTART
[delayed_gcode _PRO_BUTTON_BOUNCE_GUARD]
initial_duration: 1
gcode:
    SET_GCODE_VARIABLE MACRO=_SHUTDOWN_BUTTON_TRIGGER VARIABLE=trigger_allowed VALUE=True


# define overrides for Mainsail/Fluidd predefined macros - see client.cfg
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True    ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 105.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 105.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 10.0    ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_speed_hop        : 50.0    ; z move speed in mm/s
variable_speed_move       : 300.0   ; move speed in mm/s
variable_park_at_cancel   : True    ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 105.0   ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 105.0   ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_runout_sensor    : "filament_switch_sensor e0_sensor"
variable_idle_timeout     : 3600    ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_user_cancel_macro: "_CANCEL_PRINT_WITH_AUDIO_WARNING"
variable_user_pause_macro : "_PAUSE_WITH_STATUS"
variable_user_resume_macro: "_RESUME_WITH_STATUS"
gcode:

[gcode_macro _CANCEL_PRINT_WITH_AUDIO_WARNING]
gcode:
    {%if params.REASON %}
        _PRINT_STATUS S="{params.REASON}"
    {% endif %}

    TONE NOTES="440:70 140 349:70 140 262:140"

    _COMMON_END_PRINT

[gcode_macro _PAUSE_WITH_STATUS]
gcode:
    TONE NOTES="2093:120 140 1047:140"

[gcode_macro _RESUME_WITH_STATUS]
gcode:
    TONE NOTES="1319:70 140 2093:140"

# macos is used by END_PRINT and CANCEL_PRINT
[gcode_macro _COMMON_END_PRINT]
gcode:
    _STOP
    SET_FAN_SPEED FAN=pcb_fan SPEED=0

    {% set zstop_motor = printer.mod_params.variables.stop_motor %}
    {% if zstop_motor == 1 %}
        UPDATE_DELAYED_GCODE ID=_STOP_MOTOR DURATION=90
    {% endif %}

    UPDATE_DELAYED_GCODE ID=reset_screen DURATION=60
    UPDATE_DELAYED_GCODE ID=keep_alive_zssh DURATION=5

    {% if printer['bed_mesh'].profile_name == 'default' %}
        BED_MESH_CLEAR
        BED_MESH_PROFILE REMOVE=default
    {% endif %}

[delayed_gcode prepare_headless]
initial_duration: 1
gcode:
    BED_MESH_CLEAR
    BED_MESH_PROFILE LOAD=auto

    {% set park_dz = printer.mod_params.variables.park_dz %}
    SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=custom_park_dz VALUE={park_dz}

[delayed_gcode reset_screen]
initial_duration: 3
gcode:
    RUN_SHELL_COMMAND CMD=screen PARAMS='draw_splash'
    _BACKLIGHT S={printer.mod_params.variables.backlight_eco}

[gcode_macro START_PRINT]
description: Starting Gcode
variable_preparation_done: False
gcode:
    {% if 'EXTRUDER_TEMP' not in params or 'BED_TEMP' not in params %}
        RESPOND PREFIX="!!" MSG="Missing 'EXTRUDER_TEMP' or 'BED_TEMP' parameter!"
        RESPOND PREFIX="!!" MSG="Make sure START_PRINT in Slicer has no line breaks!"
        RESPOND PREFIX="!!" MSG="It should look like: START_PRINT EXTRUDER_TEMP=... BED_TEMP=..."

        _RAISE_ERROR
    {% endif %}
    
    RESPOND MSG="START_PRINT"
    {% set extruder_temp = params.EXTRUDER_TEMP|default(0)|float %}         ; extruder temp, usually set by slicer
    {% set bed_temp = params.BED_TEMP|default(0)|float %}                   ; bed temp, usually set by slicer
    {% set force_kamp = params.FORCE_KAMP|default(0)|int %}                 ; if True it forces the KAMP bed level process
    {% set force_leveling = params.FORCE_LEVELING|default(0)|int %}         ; if True it forces the bed level process
    {% set skip_leveling = params.SKIP_LEVELING|default(0)|int %}           ; Don't create bed mesh
    {% set skip_zoffset = params.SKIP_ZOFFSET|default(1)|int %}             ; Skip loading Z-Offset
    {% set zoffset = params.Z_OFFSET|default(0.0)|float %}                  ; Z offset
    {% set mesh = params.MESH|default("")|string %}                         ; Bed mesh profile name
    
    SET_FAN_SPEED FAN=pcb_fan SPEED=1

    SET_GCODE_VARIABLE MACRO=_START_PRINT VARIABLE=zbed_temp VALUE={bed_temp}
    SET_GCODE_VARIABLE MACRO=_START_PRINT VARIABLE=zextruder_temp VALUE={extruder_temp}
    SET_GCODE_VARIABLE MACRO=_START_PRINT VARIABLE=zforce_leveling VALUE={force_leveling}
    SET_GCODE_VARIABLE MACRO=_START_PRINT VARIABLE=zforce_kamp VALUE={force_kamp}
    SET_GCODE_VARIABLE MACRO=_START_PRINT VARIABLE=zskip_zoffset VALUE={skip_zoffset}
    SET_GCODE_VARIABLE MACRO=_START_PRINT VARIABLE=zskip_leveling VALUE={skip_leveling}
    SET_GCODE_VARIABLE MACRO=_START_PRINT VARIABLE=zzoffset VALUE={zoffset}
    SET_GCODE_VARIABLE MACRO=_START_PRINT VARIABLE=zmesh VALUE='"{mesh}"'

    UPDATE_DELAYED_GCODE ID=reset_screen DURATION=0
    SET_GCODE_VARIABLE MACRO=_START_PRINT VARIABLE=print_prepare_status VALUE=True

    {% set use_filament_sensor = printer.mod_params.variables.filament_switch_sensor %}
    {% if use_filament_sensor %}
        SET_FILAMENT_SENSOR SENSOR=e0_sensor ENABLE=1
    {% else %}
        SET_FILAMENT_SENSOR SENSOR=e0_sensor ENABLE=0
    {% endif %}

    {% if 'auto' in printer['bed_mesh'].profiles %}
        BED_MESH_CLEAR
        BED_MESH_PROFILE LOAD=auto
    {% endif %}

    _BACKLIGHT
    _START_PRINT

[gcode_macro END_PRINT]
description: Ending Gcode
gcode:
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] | default({}) %}
    {% if ("xyz" in printer.toolhead.homed_axes) %}
        {% if printer.extruder.can_extrude %}
            # move away while retracting filament
            MOVE_SAFE X=2 Y=2 E=-5 F=2000
        {% endif %}
        {% set park_dz = printer.mod_params.variables.park_dz %}
        MOVE_SAFE Z={park_dz}  F=600 ABSOLUTE=0
        # move to park position
        MOVE_SAFE X={client.custom_park_x} Y={client.custom_park_y} F=3000 ABSOLUTE=1
        M400
    {% endif %}

    {% set midi_end = printer.mod_params.variables.midi_end %}
    {% if midi_end %}
        PLAY_MIDI FILE={midi_end}
    {% else %}
        TONE NOTES="988:200 100 824:200 100 740:200 100 659:400"
    {% endif %}

    _COMMON_END_PRINT
    _MAYBE_AUTO_REBOOT


[gcode_macro _BACKLIGHT]
gcode:
    {% set default_value = printer.mod_params.variables.backlight %}
    {% set value = params.S|default(default_value)|int %}

    {% set value = [[0, value] | max, 100] | min %}

    RESPOND PREFIX="//" MSG="Display backlight: {value}%"
    RUN_SHELL_COMMAND CMD=screen PARAMS='backlight {value}'

[gcode_macro M24]
rename_existing: M24.1
gcode:
    RESUME

[gcode_macro M25]
rename_existing: M25.1
gcode:
    PAUSE
