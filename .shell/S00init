#!/bin/bash

## Mod's initialization script
##
## Copyright (C) 2025, Alexander K <https://github.com/drA1ex>
##
## This file may be distributed under the terms of the GNU GPLv3 license

source /opt/config/mod/.shell/common.sh

handle_special_boot_mode() {
    if /opt/config/mod/.shell/boot/init_boot_flag.sh apply; then
        rm -f "$BOOT_FAILURE_F"

        exit 0
    fi
}

handle_boot_options() {
    if [ -f "$BOOT_SKIP_F" ]; then 
        {
            echo "?? The mod was skipped by request!" 
            echo "?? The stock firmware will be loaded now..."
        } | logged "/opt/config/mod_data/log/init.log.emergency" --send-to-screen --screen-no-followup

        rm -f "$BOOT_SKIP_F"
        touch /tmp/SKIP_MOD_SOFT

        sync

        return 1
    fi

    if [ -f "$BOOT_FAILURE_F" ]; then 
        { 
            echo "?? The mod was skipped due to a boot failure!"
            echo "?? Reboot the printer now to skip failsafe mode."
            echo "?? The stock firmware will be loaded now..."
        } | logged "/opt/config/mod_data/log/init.log.emergency" --send-to-screen --screen-no-followup

        rm -f "$BOOT_FAILURE_F"
        touch /tmp/SKIP_MOD_HARD

        sync

        return 1
    fi

    return 0
}

initialize() {
    echo "// Initialization started"
    
    echo "// Checking special boot mode..."
    handle_special_boot_mode
    
    # If we are here: mod loading not skipped

    xzcat "$LOAD_IMG_XZ" > /dev/fb0

    # Perform date fix before time was loaded
    date 2025.01.01-00:00:00 > /dev/null

    echo "// Mounting partition..."
    mount_data_partition

    rotate_logs "/data/logFiles/boot.log"
    rotate_logs "/data/logFiles/ssh.log"
    rotate_logs "/data/logFiles/wifi.log"

    sync
    
    echo "// SWAP Initialization..."
    /opt/config/mod/.shell/boot/init_swap.sh

    echo "// Buildroot Initialization..."
    init_buildroot

    echo "// Update links..."

    # Services
    rm -f /etc/init.d/S99moon
    rm -f /etc/init.d/K99moon

    ln -fs /opt/config/mod/.shell/S55boot /etc/init.d/
    ln -fs /opt/config/mod/.shell/S60dropbear /etc/init.d/
    ln -fs /opt/config/mod/.shell/S98camera /etc/init.d/
    ln -fs /opt/config/mod/.shell/S98zssh /etc/init.d/
    ln -fs /opt/config/mod/.shell/S99root /etc/init.d/
    ln -fs /opt/config/mod/.shell/K99root /etc/init.d/
    
    # oh-my-zsh
    mkdir -p /root/.oh-my-zsh
    mount --bind /opt/config/mod/.zsh/.oh-my-zsh /root/.oh-my-zsh
    ln -fs /opt/config/mod/.zsh/.profile /root/
    ln -fs /opt/config/mod/.zsh/.zshrc /root/

    # Runtime
    ln -fns /opt/config/mod/.bin/runtime/14.2.0 /opt/lib/

    sync
    echo "// Update version..."
    
    # version
    GIT_BRANCH=$(chroot "$MOD" git --git-dir=/opt/config/mod/.git rev-parse --abbrev-ref HEAD)
    GIT_COMMIT_ID=$(chroot "$MOD" git --git-dir=/opt/config/mod/.git rev-parse --short HEAD)
    GIT_COMMIT_DATE=$(chroot "$MOD" git --git-dir=/opt/config/mod/.git show -s HEAD --format=%cd --date=format:'%d.%m.%Y %H:%M:%S')
    
    FIRMWARE_VERSION=$(cat /root/version)
    MOD_VERSION=$(cat "$VERSION_F")
    PATCH_VERSION="$GIT_BRANCH-$GIT_COMMIT_ID @ $GIT_COMMIT_DATE"

    if [ -f /opt/config/mod/patch.txt ]; then
        cp -f /opt/config/mod/patch.txt /tmp/version_patch
    elif [ "$GIT_BRANCH" != "main" ]; then
        echo "$GIT_BRANCH-$GIT_COMMIT_ID" > /tmp/version_patch
    fi
    
    chroot "$MOD" /opt/config/mod/.root/version.sh "$FIRMWARE_VERSION" "$MOD_VERSION" "$PATCH_VERSION"
    sync

    # Print version onto the screen
    "$SCRIPTS/screen.sh" draw_loading --no-clear

    # Check core version and ota version compatibility
    if ! MSG=$("$CMDS"/zversion.sh test); then
        echo "@@ Current version is not compatible with flashed core version."
        echo "@@ Flash firmware via USB."
        echo "@@ $MSG"

        echo "// It's safe to power off the printer now."
        echo "// Boot will continue in 30 seconds..."

        "$PY"/tone.py 440:70 140 349:70 140 262:140

        sleep 30
    fi

    echo "// Apply klipper patches..."
    apply_klipper_patches

    echo "// Restore config..."
    fix_config

    echo "// Apply database migrations..."
    
    # database
    if [ -f "/opt/config/mod_data/database/moonraker-sql.db" ]; then
        /opt/config/mod/.shell/migrate_db.sh
        sync
    fi

    echo "// Finishing initialization..."
    
    /opt/config/mod/.shell/motd.sh > /etc/motd
    /opt/config/mod/.shell/commands/zshaper.sh --clear

    ln -fns /opt/config/mod_data/log /data/logFiles/mod
    
    # (?) Restrict public unauthorized access to printer's camera (only SerialNnumber is needed)
    grep -q qvs.qiniuapi.com /etc/hosts || sed -i '2 i\127.0.0.1 qvs.qiniuapi.com' /etc/hosts
    sync
    
    echo "// Initialization step done!"
}

init_buildroot() {
    init_chroot
    
    mkdir -p "$MOD"/dev/pts
    mkdir -p "$MOD"/data
    mkdir -p "$MOD"/opt/config
    mkdir -p "$MOD"/opt/klipper
    mkdir -p "$MOD"/root/printer_data
    
    mount --bind /data "$MOD"/data
    mount --bind /opt/config "$MOD"/opt/config
    mount --bind /opt/klipper "$MOD"/opt/klipper
    
    mkdir -p /root/printer_data
    mkdir -p /root/printer_data/certs
    mkdir -p /root/printer_data/comms
    mkdir -p /root/printer_data/misc
    mkdir -p /root/printer_data/tmp
    
    # Init /root/printer_data
    ln -fns /data /root/printer_data/gcodes
    ln -fns /data/logFiles /root/printer_data/logs
    ln -fns /opt/config/ /root/printer_data/config
    ln -fns /opt/config/mod_data/database /root/printer_data/database
    ln -fns /opt/config/mod/.bin/exec /root/printer_data/bin
    ln -fns /opt/config/mod/.py /root/printer_data/py
    ln -fns /opt/config/mod/.shell /root/printer_data/scripts
    
    ln -fns /opt/config/mod/moonraker.conf /root/printer_data/config/moonraker.conf
    ln -fns /opt/config/mod/.root/moonraker.asvc /root/printer_data/moonraker.asvc

    sync
    
    mount --bind /root/printer_data "$MOD"/root/printer_data

    echo "// Finishing buildroot initialization..."

    # hwclock
    ln -fs /opt/config/mod/.root/fake-hwclock "$MOD"/usr/sbin/

    # load datetime
    echo "// Loading last saved time..."
    chroot "$MOD" fake-hwclock load
    
    # moon
    ln -fns /opt/config/mod/.root/moonraker "$MOD"/root/moonraker-env/moonraker

    # web
    mkdir -p "$MOD"/root/www
    [ -d "$MOD"/root/fluidd ] && mv "$MOD"/root/fluidd "$MOD"/root/www/
    [ -d "$MOD"/root/mainsail ] && mv "$MOD"/root/mainsail "$MOD"/root/www/

    ln -fs /opt/config/mod/.root/config.json "$MOD"/root/www/
    
    "$CMDS"/zhttp.sh apply
    sync
}

apply_klipper_patches() {
    local SRC_DIR="/opt/config/mod/.py/klipper"
    local TARGET_DIR="/opt/klipper/klippy"


    # Remove old patches/extensions
    find $TARGET_DIR -type l | while read -r file; do
        local rel_path=${file#"$TARGET_DIR/"}
        local file_name=${file##*/}

        if [ -f "$file.bak" ]; then # Patch
            if [ ! -f "$SRC_DIR/patches/$rel_path" ]; then
                echo "// Remove old patch: $file"
                mv "$file.bak" "$file"
            fi
        else
            if [ ! -f "$SRC_DIR/plugins/$file_name" ]; then
                echo "// Remove old plugin: $file"
                rm -f "$file"
            fi
        fi
    done

    sync
    echo "Linking extensions..."
    
    # Link new extensions
    ln -fs $SRC_DIR/plugins/* "$TARGET_DIR/extras/"

    sync
    echo "Apply patches..."
    
    # Apply klipper patches
    find $SRC_DIR/patches -type f | while read -r file; do
        local rel_file=${file#"$SRC_DIR/patches/"}
        local rel_path=$(dirname "$rel_file")
        local target="$TARGET_DIR/$rel_file"
        
        mkdir -p "$TARGET_DIR/$rel_path"
        
        if [ ! -L "$target" ]; then
            if [ ! -f "$target.bak" ]; then
                echo "// Create klipper file backup: $target"
                mv "$target" "$target.bak"
            else
                echo "// Remove overwritten klipper file: $target"
                rm -f "$target"
            fi
            
            echo "// Link patched klipper file: $file"
            ln -fs "$file" "$target"
        else
            ln -fs "$file" "$target"
        fi
    done

    sync
    echo "Apply fixes..."

    "$CMDS"/ztune_klipper.sh apply

    sync
}

fix_config() {
    TMP_CFG_PATH=/tmp/printer.tmp.cfg
    BATCH_FILE=/tmp/cfg_backup_batch.json

    # 1. Create dump with parameters from printer.base.cfg
    chroot "$MOD" /bin/python3 "$PY"/cfg_backup.py \
        --mode backup \
        --config /opt/config/printer.base.cfg \
        --data $TMP_CFG_PATH \
        --params /opt/config/mod/.cfg/init.move.cfg

    # Check if any parameters were found
    if [ $? -eq 0 ]; then
        # TODO: Merge with defaults?
        DATA_MOVE_CFG=$TMP_CFG_PATH
    else
        DATA_MOVE_CFG=/opt/config/mod/.cfg/data.init.move.cfg
    fi

    # Create the batch file
    echo "[" > $BATCH_FILE

    # 2. Move params from printer.base.cfg to printer.cfg
    echo "
    {
        \"mode\": \"restore\",
        \"config\": \"/opt/config/printer.cfg\",
        \"data\": \"$DATA_MOVE_CFG\",
        \"params\": \"/opt/config/mod/.cfg/init.move.cfg\",
        \"avoid_writes\": true
    }," >> $BATCH_FILE

    # 3. Initialize display configuration
    local screen="$("$SCRIPTS"/commands/zdisplay.sh test)"
    if [ "$screen" == "STOCK" ]; then
        # Stock screen enabled
        echo "
        {
            \"mode\": \"restore\",
            \"config\": \"/opt/config/printer.cfg\",
            \"params\": \"/opt/config/mod/.cfg/init.display.stock.cfg\",
            \"no_data\": true,
            \"avoid_writes\": true
        }," >> $BATCH_FILE
    elif [ "$screen" == "FEATHER" ]; then
        # Feather screen enabled
        echo "
        {
            \"mode\": \"restore\",
            \"config\": \"/opt/config/printer.cfg\",
            \"params\": \"/opt/config/mod/.cfg/init.display.feather.cfg\",
            \"no_data\": true,
            \"avoid_writes\": true
        }," >> $BATCH_FILE
    elif [ "$screen" == "HEADLESS" ]; then
        # Headless mode enabled
        echo "
        {
            \"mode\": \"restore\",
            \"config\": \"/opt/config/printer.cfg\",
            \"params\": \"/opt/config/mod/.cfg/init.display.headless.cfg\",
            \"no_data\": true,
            \"avoid_writes\": true
        }," >> $BATCH_FILE
    elif [ "$screen" == "GUPPY" ]; then
        # Guppy mode enabled
        echo "
        {
            \"mode\": \"restore\",
            \"config\": \"/opt/config/printer.cfg\",
            \"params\": \"/opt/config/mod/.cfg/init.display.guppy.cfg\",
            \"no_data\": true,
            \"avoid_writes\": true
        }," >> $BATCH_FILE
    else
        echo @@ Invalid display parameter: "$screen"
    fi

    # 4. Init printer.cfg configuration
    echo "
    {
        \"mode\": \"restore\",
        \"config\": \"/opt/config/printer.cfg\",
        \"params\": \"/opt/config/mod/.cfg/init.cfg\",
        \"data\": \"/opt/config/mod/.cfg/data.init.cfg\",
        \"avoid_writes\": true
    }," >> $BATCH_FILE

    # 5. Init printer.base.cfg configuration
    echo "
    {
        \"mode\": \"restore\",
        \"config\": \"/opt/config/printer.base.cfg\",
        \"params\": \"/opt/config/mod/.cfg/init.base.cfg\",
        \"data\": \"/opt/config/mod/.cfg/data.init.base.cfg\",
        \"avoid_writes\": true
    }," >> $BATCH_FILE

    # 6. Apply tunning parameters
    TUNING_ENABLED=$("$CMDS"/zconf.sh "$VAR_PATH" --get "tune_config" "0")
    if [ "$TUNING_ENABLED" -eq 1 ]; then
        echo "
        {
            \"mode\": \"restore\",
            \"config\": \"/opt/config/printer.cfg\",
            \"params\": \"/opt/config/mod/.cfg/tuning.cfg\",
            \"no_data\": true,
            \"avoid_writes\": true
        }," >> $BATCH_FILE
    else
         echo "
        {
            \"mode\": \"restore\",
            \"config\": \"/opt/config/printer.cfg\",
            \"params\": \"/opt/config/mod/.cfg/tuning.off.cfg\",
            \"no_data\": true,
            \"avoid_writes\": true
        }," >> $BATCH_FILE
    fi

    # 7. Restore printer.base.cfg if a backup exists
    if [ -f /opt/config/printer.base.cfg.bak ]; then
        echo "
        {
            \"mode\": \"restore\",
            \"config\": \"/opt/config/printer.base.cfg\",
            \"params\": \"/opt/config/mod_data/backup.params.cfg\",
            \"data\": \"/opt/config/printer.base.cfg.bak\",
            \"avoid_writes\": true
        }," >> $BATCH_FILE
    fi

    # Finalize the batch file (remove last comma and close array)
    sed -i '$s/,$//' $BATCH_FILE
    echo "]" >> $BATCH_FILE

    # Run the batch file
    chroot "$MOD" /bin/python3 "$PY"/cfg_backup.py --batch $BATCH_FILE
    sync

    # Clean up the temporary files
    rm -f $BATCH_FILE $TMP_CFG_PATH
}

rotate_logs() {
    path="$1"

    echo "// Rotating logs: $path"
    mv -f "$path.4"  "$path.5" &> /dev/null
    mv -f "$path.3"  "$path.4" &> /dev/null
    mv -f "$path.2"  "$path.3" &> /dev/null
    mv -f "$path.1"  "$path.2" &> /dev/null
    mv -f "$path"    "$path.1" &> /dev/null

    echo "// Created" | logged "$path" --no-print
}

case "$1" in
    start)
        if [ -f "$INIT_FLAG" ]; then
            echo "Already initialized!"
            exit 1
        fi

        # Check for special boot options
        if ! handle_boot_options; then 
            # If any exist, remove other options and skip the boot.
            rm -f /opt/config/mod/BOOT_FLAG*

            # Pause so the user can see what happened
            sync
            sleep 3

            exit 0
        fi

        # Print skipping prompt, create flag file, wait, then delete flag
        # If the user reboots the printer, the file persists
        # We'll process it in the next boot
        xzcat /opt/config/mod/skip.img.xz > /dev/fb0
        touch "$BOOT_SKIP_F"

        sync
        sleep 3

        rm -f "$BOOT_SKIP_F"
        sync

        cat /root/boot.img > /dev/fb0

        # The failure flag will be deleted in S99root if the boot succeeds
        touch "$BOOT_FAILURE_F"
        sync
        
        mkdir -p /opt/config/mod_data/log/

        rotate_logs "/opt/config/mod_data/log/init.log"
        rotate_logs "/opt/config/mod_data/log/skip.log"
        sync
        
        initialize 2>&1 | logged "/opt/config/mod_data/log/init.log" --send-to-screen

        touch "$INIT_FLAG"
        sync
    ;;
    
    reload)
        {
            echo "// Apply klipper patches..."
            apply_klipper_patches

            echo "// Update configs..."
            fix_config

            echo "// Configuration updated"
            echo "// Restart klipper process to apply changes"
        }  2>&1 | logged --no-log --send-to-screen --screen-no-followup
    ;;

    log)
        cat /opt/config/mod_data/log/init.log
    ;;

    *)
        echo "Usage: $0 (start|reload|log)"
        exit 1
    ;;
esac